{
	"info": {
		"_postman_id": "ed2dc92a-2170-43ab-a9e1-b60880ab1625",
		"name": "API AutomationExercise",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "36014341"
	},
	"item": [
		{
			"name": "API 1: Get All Products List",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response Code = 200)\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.responseCode).to.eql(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response debe tener body\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Response tiene una lista de productos\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an('object');\r",
							"    pm.expect(jsonData.products).to.be.an('array');\r",
							"});\r",
							"\r",
							"pm.test(\"Todos los productos tienen los campos requeridos y no están vacíos\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var CamposRequeridos = [\"id\", \"name\", \"price\", \"brand\", \"category\"];\r",
							"    \r",
							"    jsonData.products.forEach(function(producto) {\r",
							"        CamposRequeridos.forEach(function(campo) {\r",
							"            pm.expect(producto).to.have.property(campo);\r",
							"            pm.expect(producto[campo]).to.not.be.oneOf([null, \"\", undefined]);\r",
							"        });\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://automationexercise.com/api/productsList",
					"protocol": "https",
					"host": [
						"automationexercise",
						"com"
					],
					"path": [
						"api",
						"productsList"
					]
				}
			},
			"response": []
		},
		{
			"name": "API 2: POST To All Products List",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response code = 405\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"\tpm.expect(jsonData.responseCode).to.eql(405);\r",
							"});\r",
							"\r",
							"pm.test(\"Response debe tener body\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Response message = 'This request method is not supported'\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql(\"This request method is not supported.\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "https://www.automationexercise.com/api/productsList",
					"protocol": "https",
					"host": [
						"www",
						"automationexercise",
						"com"
					],
					"path": [
						"api",
						"productsList"
					]
				}
			},
			"response": []
		},
		{
			"name": "API 3: Get All Brands List",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response debe tener body\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Response Code = 200\", function () {\r",
							"    var jsonData = pm.response.json() ;\r",
							"    pm.expect(jsonData.responseCode).to.eql(200) ;\r",
							"});\r",
							"\r",
							"pm.test(\"La respuesta contiene una lista de marcas\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an(\"object\")\r",
							"    pm.expect(jsonData.brands).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"pm.test(\"Cada marca tiene los campos requeridos y no están vacíos\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var CamposRequeridos = [\"id\", \"brand\"];\r",
							"\r",
							"    jsonData.brands.forEach(function(brand) {\r",
							"        CamposRequeridos.forEach(function(campo) {\r",
							"            pm.expect(brand).to.have.property(campo);\r",
							"            pm.expect(brand[campo]).to.not.be.oneOf([null, \"\", undefined]);\r",
							"        });\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://www.automationexercise.com/api/brandsList",
					"protocol": "https",
					"host": [
						"www",
						"automationexercise",
						"com"
					],
					"path": [
						"api",
						"brandsList"
					]
				}
			},
			"response": []
		},
		{
			"name": "API 4: PUT To All Brands List",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response debe tener body\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Response code = 405\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"\tpm.expect(jsonData.responseCode).to.eql(405);\r",
							"});\r",
							"\r",
							"pm.test(\"Response message = 'This request method is not supported'\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql(\"This request method is not supported.\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "https://www.automationexercise.com/api/brandsList",
					"protocol": "https",
					"host": [
						"www",
						"automationexercise",
						"com"
					],
					"path": [
						"api",
						"brandsList"
					]
				}
			},
			"response": []
		},
		{
			"name": "API 5: POST To Search Product",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var productList = [\"dress\", \"tops\", \"saree\", \"tshirt\", \"jeans\", \"tops & shirts\"];\r",
							"\r",
							"var randomProduct = productList[Math.floor(Math.random() * productList.length)];\r",
							"\r",
							"pm.collectionVariables.set(\"search_product\", randomProduct);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response debe tener body\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Response Code = 200)\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.responseCode).to.eql(200);\r",
							"});\r",
							"\r",
							"pm.test(\"La respuesta contiene una lista de productos\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an(\"object\")\r",
							"    pm.expect(jsonData.products).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"pm.test(\"Todos los productos tienen los campos requeridos y no están vacíos\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var CamposRequeridos = [\"id\", \"name\", \"price\", \"brand\", \"category\"];\r",
							"    \r",
							"    jsonData.products.forEach(function(producto) {\r",
							"        CamposRequeridos.forEach(function(campo) {\r",
							"            pm.expect(producto).to.have.property(campo);\r",
							"            pm.expect(producto[campo]).to.not.be.oneOf([null, \"\", undefined]);\r",
							"        });\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "search_product",
							"value": "{{search_product}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "https://www.automationexercise.com/api/searchProduct",
					"protocol": "https",
					"host": [
						"www",
						"automationexercise",
						"com"
					],
					"path": [
						"api",
						"searchProduct"
					]
				}
			},
			"response": []
		},
		{
			"name": "API 6: POST To Search Product without search_product parameter",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response debe tener body\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Response code = 400\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"\tpm.expect(jsonData.responseCode).to.eql(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Response message = 'Bad request, search_product parameter is missing in POST request.'\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql(\"Bad request, search_product parameter is missing in POST request.\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "https://www.automationexercise.com/api/searchProduct",
					"protocol": "https",
					"host": [
						"www",
						"automationexercise",
						"com"
					],
					"path": [
						"api",
						"searchProduct"
					]
				}
			},
			"response": []
		},
		{
			"name": "API 11: POST To Create/Register User Account",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"name\", pm.variables.replaceIn(\"{{$randomUserName}}\"));\r",
							"pm.collectionVariables.set(\"email\", pm.variables.replaceIn(\"{{$randomEmail}}\"));\r",
							"pm.collectionVariables.set(\"password\", pm.variables.replaceIn(\"{{$randomPassword}}\"));\r",
							"\r",
							"pm.collectionVariables.set(\"title\", [\"Mr.\", \"Mrs.\"][Math.floor(Math.random() * 2)]);\r",
							"\r",
							"pm.collectionVariables.set(\"birth_date\", Math.floor(Math.random() * 28) + 1);\r",
							"pm.collectionVariables.set(\"birth_month\", pm.variables.replaceIn(\"{{$randomMonth}}\"));\r",
							"pm.collectionVariables.set(\"birth_year\", Math.floor(Math.random() * (2002 - 1970)) + 1970);\r",
							"\r",
							"pm.collectionVariables.set(\"firstname\", pm.variables.replaceIn(\"{{$randomFirstName}}\"));\r",
							"pm.collectionVariables.set(\"lastname\", pm.variables.replaceIn(\"{{$randomLastName}}\"));\r",
							"pm.collectionVariables.set(\"company\", pm.variables.replaceIn(\"{{$randomCompanyName}}\"));\r",
							"pm.collectionVariables.set(\"address1\", pm.variables.replaceIn(\"{{$randomStreetAddress}}\"));\r",
							"pm.collectionVariables.set(\"address2\", pm.variables.replaceIn(\"{{$randomStreetName}}\"));\r",
							"pm.collectionVariables.set(\"country\", [\"India\", \"United States\", \"Canada\", \"Australia\", \"Israel\", \"New Zealand\"][Math.floor(Math.random() * 6)]);\r",
							"pm.collectionVariables.set(\"zipcode\", pm.variables.replaceIn(\"{{$randomInt}}\"));\r",
							"pm.collectionVariables.set(\"state\", pm.variables.replaceIn(\"{{$randomCountryCode}}\"));\r",
							"pm.collectionVariables.set(\"city\", pm.variables.replaceIn(\"{{$randomCity}}\"));\r",
							"pm.collectionVariables.set(\"mobile_number\", pm.variables.replaceIn(\"{{$randomPhoneNumber}}\"));\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response debe tener body\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Response code = 201\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"\tpm.expect(jsonData.responseCode).to.eql(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response message = 'User created!'\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql(\"User created!\");\r",
							"});\r",
							"\r",
							"// pm.execution.setNextRequest(\"API 13: PUT METHOD To Update User Account\")"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "email",
							"value": "{{email}}",
							"type": "text"
						},
						{
							"key": "password",
							"value": "{{password}}",
							"type": "text"
						},
						{
							"key": "title",
							"value": "{{title}}",
							"type": "text"
						},
						{
							"key": "birth_date",
							"value": "{{birth_date}}",
							"type": "text"
						},
						{
							"key": "birth_month",
							"value": "{{birth_month}}",
							"type": "text"
						},
						{
							"key": "birth_year",
							"value": "{{birth_year}}",
							"type": "text"
						},
						{
							"key": "firstname",
							"value": "{{firstname}}",
							"type": "text"
						},
						{
							"key": "lastname",
							"value": "{{lastname}}",
							"type": "text"
						},
						{
							"key": "company",
							"value": "{{company}}",
							"type": "text"
						},
						{
							"key": "address1",
							"value": "{{address1}}",
							"type": "text"
						},
						{
							"key": "address2",
							"value": "{{address2}}",
							"type": "text"
						},
						{
							"key": "country",
							"value": "{{country}}",
							"type": "text"
						},
						{
							"key": "zipcode",
							"value": "{{zipcode}}",
							"type": "text"
						},
						{
							"key": "state",
							"value": "{{state}}",
							"type": "text"
						},
						{
							"key": "city",
							"value": "{{city}}",
							"type": "text"
						},
						{
							"key": "mobile_number",
							"value": "{{mobile_number}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "https://automationexercise.com/api/createAccount",
					"protocol": "https",
					"host": [
						"automationexercise",
						"com"
					],
					"path": [
						"api",
						"createAccount"
					]
				}
			},
			"response": []
		},
		{
			"name": "API 13: PUT METHOD To Update User Account",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"title\", [\"Mr.\", \"Mrs.\"][Math.floor(Math.random() * 2)]);\r",
							"\r",
							"pm.collectionVariables.set(\"birth_date\", Math.floor(Math.random() * 28) + 1);\r",
							"pm.collectionVariables.set(\"birth_month\", pm.variables.replaceIn(\"{{$randomMonth}}\"));\r",
							"pm.collectionVariables.set(\"birth_year\", Math.floor(Math.random() * (2002 - 1970)) + 1970);\r",
							"\r",
							"pm.collectionVariables.set(\"firstname\", pm.variables.replaceIn(\"{{$randomFirstName}}\"));\r",
							"pm.collectionVariables.set(\"lastname\", pm.variables.replaceIn(\"{{$randomLastName}}\"));\r",
							"pm.collectionVariables.set(\"company\", pm.variables.replaceIn(\"{{$randomCompanyName}}\"));\r",
							"pm.collectionVariables.set(\"address1\", pm.variables.replaceIn(\"{{$randomStreetAddress}}\"));\r",
							"pm.collectionVariables.set(\"address2\", pm.variables.replaceIn(\"{{$randomStreetName}}\"));\r",
							"pm.collectionVariables.set(\"country\", [\"India\", \"United States\", \"Canada\", \"Australia\", \"Israel\", \"New Zealand\"][Math.floor(Math.random() * 6)]);\r",
							"pm.collectionVariables.set(\"zipcode\", pm.variables.replaceIn(\"{{$randomInt}}\"));\r",
							"pm.collectionVariables.set(\"state\", pm.variables.replaceIn(\"{{$randomCountryCode}}\"));\r",
							"pm.collectionVariables.set(\"city\", pm.variables.replaceIn(\"{{$randomCity}}\"));\r",
							"pm.collectionVariables.set(\"mobile_number\", pm.variables.replaceIn(\"{{$randomPhoneNumber}}\"));\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response debe tener body\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Response code = 200\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"\tpm.expect(jsonData.responseCode).to.eql(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response message = 'User created!'\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql(\"User updated!\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "email",
							"value": "{{email}}",
							"type": "text"
						},
						{
							"key": "password",
							"value": "{{password}}",
							"type": "text"
						},
						{
							"key": "title",
							"value": "{{title}}",
							"type": "text"
						},
						{
							"key": "birth_date",
							"value": "{{birth_date}}",
							"type": "text"
						},
						{
							"key": "birth_month",
							"value": "{{birth_month}}",
							"type": "text"
						},
						{
							"key": "birth_year",
							"value": "{{birth_year}}",
							"type": "text"
						},
						{
							"key": "firstname",
							"value": "{{firstname}}",
							"type": "text"
						},
						{
							"key": "lastname",
							"value": "{{lastname}}",
							"type": "text"
						},
						{
							"key": "company",
							"value": "{{company}}",
							"type": "text"
						},
						{
							"key": "address1",
							"value": "{{address1}}",
							"type": "text"
						},
						{
							"key": "address2",
							"value": "{{address2}}",
							"type": "text"
						},
						{
							"key": "country",
							"value": "{{country}}",
							"type": "text"
						},
						{
							"key": "zipcode",
							"value": "{{zipcode}}",
							"type": "text"
						},
						{
							"key": "state",
							"value": "{{state}}",
							"type": "text"
						},
						{
							"key": "city",
							"value": "{{city}}",
							"type": "text"
						},
						{
							"key": "mobile_number",
							"value": "{{mobile_number}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "https://automationexercise.com/api/updateAccount",
					"protocol": "https",
					"host": [
						"automationexercise",
						"com"
					],
					"path": [
						"api",
						"updateAccount"
					]
				}
			},
			"response": []
		},
		{
			"name": "API 14: GET user account detail by email",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response Code = 200)\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.responseCode).to.eql(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response debe tener body\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"La respuesta tiene los campos requeridos y no están vacíos\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var usuario = jsonData.user;\r",
							"    var CamposRequeridos = [\"id\", \"name\", \"email\", \"title\", \"birth_day\", \"birth_month\", \"birth_year\", \"first_name\", \"last_name\", \"company\", \r",
							"    \"address1\", \"address2\", \"country\", \"state\", \"city\", \"zipcode\"];\r",
							"\r",
							"    CamposRequeridos.forEach(function(campo) {\r",
							"        pm.expect(usuario).to.have.property(campo);\r",
							"        pm.expect(usuario[campo]).to.not.be.oneOf([null, \"\", undefined]);\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://automationexercise.com/api/getUserDetailByEmail?email={{email}}",
					"protocol": "https",
					"host": [
						"automationexercise",
						"com"
					],
					"path": [
						"api",
						"getUserDetailByEmail"
					],
					"query": [
						{
							"key": "email",
							"value": "{{email}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "API 7: POST To Verify Login with valid details",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response code = 200\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"\tpm.expect(jsonData.responseCode).to.eql(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response debe tener body\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Response message = 'User exists!'\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql(\"User exists!\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "email",
							"value": "{{email}}",
							"type": "text"
						},
						{
							"key": "password",
							"value": "{{password}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "https://www.automationexercise.com/api/verifyLogin",
					"protocol": "https",
					"host": [
						"www",
						"automationexercise",
						"com"
					],
					"path": [
						"api",
						"verifyLogin"
					]
				}
			},
			"response": []
		},
		{
			"name": "API 8: POST To Verify Login without email parameter",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response code = 400\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"\tpm.expect(jsonData.responseCode).to.eql(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Response debe tener body\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Response message = 'Bad request, email or password parameter is missing in POST request.'\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql(\"Bad request, email or password parameter is missing in POST request.\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "https://www.automationexercise.com/api/verifyLogin",
					"protocol": "https",
					"host": [
						"www",
						"automationexercise",
						"com"
					],
					"path": [
						"api",
						"verifyLogin"
					]
				}
			},
			"response": []
		},
		{
			"name": "API 9: DELETE To Verify Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response code = 405\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"\tpm.expect(jsonData.responseCode).to.eql(405);\r",
							"});\r",
							"\r",
							"pm.test(\"Response debe tener body\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Response message = 'This request method is not supported'\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql(\"This request method is not supported.\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://www.automationexercise.com/api/verifyLogin",
					"protocol": "https",
					"host": [
						"www",
						"automationexercise",
						"com"
					],
					"path": [
						"api",
						"verifyLogin"
					]
				}
			},
			"response": []
		},
		{
			"name": "API 10: POST To Verify Login with invalid details",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response code = 404\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"\tpm.expect(jsonData.responseCode).to.eql(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Response debe tener body\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Response message = 'User not found!'\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql(\"User not found!\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "email",
							"value": "jorge@jorge.com",
							"type": "text"
						},
						{
							"key": "password",
							"value": "invalidpass",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "https://www.automationexercise.com/api/verifyLogin",
					"protocol": "https",
					"host": [
						"www",
						"automationexercise",
						"com"
					],
					"path": [
						"api",
						"verifyLogin"
					]
				}
			},
			"response": []
		},
		{
			"name": "API 12: DELETE METHOD To Delete User Account",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response code = 200\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"\tpm.expect(jsonData.responseCode).to.eql(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response debe tener body\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Response message = 'Account deleted!'\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql(\"Account deleted!\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "email",
							"value": "{{email}}",
							"type": "text"
						},
						{
							"key": "password",
							"value": "{{password}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "https://www.automationexercise.com/api/deleteAccount",
					"protocol": "https",
					"host": [
						"www",
						"automationexercise",
						"com"
					],
					"path": [
						"api",
						"deleteAccount"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "URL",
			"value": "",
			"type": "string"
		},
		{
			"key": "search_product",
			"value": ""
		},
		{
			"key": "name",
			"value": "randomUserName",
			"type": "string"
		},
		{
			"key": "email",
			"value": "randomEmail",
			"type": "string"
		},
		{
			"key": "password",
			"value": "randomPassword",
			"type": "string"
		},
		{
			"key": "title",
			"value": "randomTitle",
			"type": "string"
		},
		{
			"key": "birth_date",
			"value": "randomBirthDate",
			"type": "string"
		},
		{
			"key": "birth_month",
			"value": "randomMonth",
			"type": "string"
		},
		{
			"key": "birth_year",
			"value": "randomBirthYear",
			"type": "string"
		},
		{
			"key": "firstname",
			"value": "randomFirstName",
			"type": "string"
		},
		{
			"key": "lastname",
			"value": "randomLastName",
			"type": "string"
		},
		{
			"key": "company",
			"value": "randomCompanyName",
			"type": "string"
		},
		{
			"key": "address1",
			"value": "randomAddress1",
			"type": "string"
		},
		{
			"key": "address2",
			"value": "randomStreetName",
			"type": "string"
		},
		{
			"key": "country",
			"value": "India",
			"type": "string"
		},
		{
			"key": "zipcode",
			"value": "randomInt",
			"type": "string"
		},
		{
			"key": "state",
			"value": "randomCountryCode",
			"type": "string"
		},
		{
			"key": "city",
			"value": "randomCity",
			"type": "string"
		},
		{
			"key": "mobile_number",
			"value": "randomMobileNumber",
			"type": "string"
		}
	]
}